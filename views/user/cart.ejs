<%- include('../partials/user/header.ejs') %>
<head>
    <link rel="stylesheet" href="cart-style.css">
</head>
<div class="cart-container">
    <h2>Your Cart</h2>
    
    <!-- Notification Div -->
    <div class="notification" id="notification" style="display: none;"></div>

    <div id="cartItems">
        <% if (cart.length === 0) { %>
            <p>Your cart is empty.</p>
        <% } else { %>
            <% cart.forEach(item => { %>
                <div class="cart-item" data-product-id="<%= item.productId._id %>">
                    <div style="flex: 1; display: flex; align-items: center;">
                        <img src="./uploads/product-images/<%= item.productId.image[0] %>" alt="<%= item.productId.productName %>" class="img-thumbnail">
                        <div>
                            <h5><%= item.productId.productName %></h5>
                            <p>Brand: <%= item.productId.brandName %></p>
                            <p>Price: 
                                <% if (item.productId.bestOffer) { %>
                                    <span class="original-price" style="text-decoration: line-through;">&#8377;<%= item.productId.price.toFixed(2) %></span>
                                    <span class="discounted-price" style="color: red;">&#8377;<%= (item.productId.price - item.productId.bestOffer.effectiveDiscount).toFixed(2) %></span>
                                <% } else { %>
                                    &#8377;<span class="discounted-price"><%= item.productId.price.toFixed(2) %></span>
                                <% } %>
                            </p>
                            <p>Quantity: 
                                <input type="number" value="<%= item.quantity %>" min="1" 
                                       onchange="updateQuantity('<%= item.productId._id %>', this.value)"
                                       aria-label="Quantity for <%= item.productId.productName %>">
                            </p>
                        </div>
                    </div>
                    <div style="text-align: right; flex: 0 0 200px;">
                        <% if (item.productId.bestOffer) { %>
                            <p>Total: &#8377;<span class="item-total" id="total-<%= item.productId._id %>"><%= ((item.productId.price - item.productId.bestOffer.effectiveDiscount) * item.quantity).toFixed(2) %></span></p>
                        <% } else { %>
                            <p>Total: &#8377;<span class="item-total" id="total-<%= item.productId._id %>"><%= (item.productId.price * item.quantity).toFixed(2) %></span></p>
                        <% } %>
                        <button class="btn btn-danger" onclick="removeFromCart('<%= item.productId._id %>')"
                                aria-label="Remove <%= item.productId.productName %> from cart">Remove</button>
                    </div>
                </div>
            <% }) %>
        <% } %>
    </div>
    <div id="cartSummary" class="mt-3">
        <h4>Total Price: &#8377;<span id="cart-total"><%= totalPrice.toFixed(2) %></span></h4>
        <% if (offer) { %>
            <p>Offer: <%= offer %></p>
        <% } %>
    </div>
    <% if(cart.length > 0) { %>
        <button class="btn btn-success" onclick="proceedToCheckout()">Proceed to Checkout</button>
    <% } %>
</div>

<%- include('../partials/user/footer.ejs') %>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script>
    async function proceedToCheckout() {
    try {
        const response = await fetch('/checkout');

        if (response.ok) {
            window.location.href = '/checkout';
        } else {
            const data = await response.json();
            if (data.message) {
                showNotification(data.message, "error");
            } else {
                showNotification("An unexpected error occurred.", "error");
            }
        }
    } catch (error) {
        console.error("Error proceeding to checkout:", error);
        showNotification("Failed to proceed to checkout.", "error");
    }
}

    async function updateQuantity(productId, quantity) {
        const cartItem = document.querySelector(`[data-product-id="${productId}"]`);
        const itemTotalElement = cartItem.querySelector('.item-total');
        const price = cartItem.querySelector('.discounted-price');

        if (!price) {
            console.error("Price not found for the item.");
            return;
        }

        const itemPrice = parseFloat(price.textContent.replace(/₹|,/g, '').trim());
        const itemTotal = (itemPrice * parseInt(quantity)).toFixed(2);
        itemTotalElement.textContent = itemTotal;

        updateCartTotal();

        try {
            const response = await fetch(`/cart/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ quantity: parseInt(quantity) }),
            });

            const result = await response.json();

            if (!response.ok) {
                showNotification(result.message || "Failed to update quantity.", "error");
            } else {
                showNotification('Quantity updated successfully', "success");
            }
        } catch (error) {
            console.error("Error updating quantity:", error);
            showNotification('Failed to update quantity', "error");
        }
    }

    async function removeFromCart(productId) {
        try {
            const response = await fetch(`/cart/${productId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            });

            const result = await response.json();

            if (!response.ok) {
                showNotification(result.message || "Failed to remove item.", "error");
            } else {
                const cartItem = document.querySelector(`[data-product-id="${productId}"]`);
                cartItem.remove();
                updateCartTotal();
                showNotification('Item removed from cart', "success");
            }
        } catch (error) {
            console.error(error);
            showNotification('Failed to remove item', "error");
        }
    }

    function showNotification(message, type) {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.style.display = 'block';

        notification.style.backgroundColor = type === "success" ? "#28a745" : "#dc3545";

        notification.classList.add('show');

        setTimeout(() => {
            notification.classList.remove('show');
            notification.style.display = 'none';
        }, 3000);
    }
    function updateCartTotal() {
        const itemTotals = document.querySelectorAll('.item-total');
        let total = 0;
        itemTotals.forEach(item => {
            total += parseFloat(item.textContent.replace(/₹|,/g, '').trim());
        });
        document.getElementById('cart-total').textContent = total.toFixed(2);
    }
</script>